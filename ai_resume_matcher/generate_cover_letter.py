import requests
from config import GEMINI_API_KEY, GEMINI_URL, GEMINI_HEADERS


def generate_cover_letter(resume: str, job_description: str):
    prompt = f"""
–°–æ–∑–¥–∞–π —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—é–º–µ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –î–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å
- –ê–∫—Ü–µ–Ω—Ç –Ω–∞ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–¥ –≤–∞–∫–∞–Ω—Å–∏—é
- –î–æ 300 —Å–ª–æ–≤
- –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –í–≤–µ–¥–µ–Ω–∏–µ ‚Äî –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ ‚Äî –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–†–µ–∑—é–º–µ:
{resume}

–í–∞–∫–∞–Ω—Å–∏—è:
{job_description}
"""

    payload = {"contents": [{"parts": [{"text": prompt}]}]}

    response = requests.post(
        f"{GEMINI_URL}?key={GEMINI_API_KEY}", headers=GEMINI_HEADERS, json=payload
    )

    if response.status_code == 200:
        return response.json()["candidates"][0]["content"]["parts"][0]["text"]
    else:
        raise Exception(f"Gemini API error: {response.status_code} {response.text}")


if __name__ == "__main__":
    with open("../data/resume.txt", "r", encoding="utf-8") as f:
        resume = f.read()
    with open("../data/job.txt", "r", encoding="utf-8") as f:
        job = f.read()
    result = generate_cover_letter(resume, job)
    print("üì® –°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ:\n")
    print(result)
